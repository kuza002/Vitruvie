import json

ENCODING = 'utf-8'


class Character:
    def __init__(self, file_name, js):
        self.file_name = file_name
        self.name = js['name']
        self.characteristics = js['characteristics']
        self.skills = js['skills']
        self.js = js

        if js.get('resources') is not None:
            self.health = js['resources']['–∑–¥–æ—Ä–æ–≤—å–µ']
            self.endurance = js['resources']['–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å']
            self.mind = js['resources']['—Ä–∞—Å—Å—É–¥–æ–∫']
            self.will = js['resources']['–≤–æ–ª—è']
        else:
            self.health = int(self.characteristics['—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ']) * 3
            self.endurance = int(self.characteristics['–¥–≤–∏–∂–µ–Ω–∏–µ']) * 3
            self.mind = int(self.characteristics['–º—ã—à–ª–µ–Ω–∏–µ']) * 3
            self.will = int(self.characteristics['–æ–±—â–µ–Ω–∏–µ']) * 3

            self.save()

    @staticmethod
    def by_name(username, person_name):
        pass

    def add_to_stat(self, stat, value):
        def valid(value, maximum, minimum=0):
            value = min(value, maximum)
            return max(value, 0)

        stat = stat.lower().strip()
        if stat not in list(self.js['resources'].keys()):
            return False

        match stat:
            case '–∑–¥–æ—Ä–æ–≤—å–µ':
                valid_value = valid(self.health + value, int(self.characteristics['—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ']) * 3)
                self.health = valid_value

            case '–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å':
                valid_value = valid(self.endurance + value, int(self.characteristics['–¥–≤–∏–∂–µ–Ω–∏–µ']) * 3)
                self.endurance = valid_value

            case "—Ä–∞—Å—Å—É–¥–æ–∫":
                valid_value = valid(self.mind + value, int(self.characteristics['–º—ã—à–ª–µ–Ω–∏–µ']) * 3)
                self.mind = valid_value

            case '–≤–æ–ª—è':
                valid_value = valid(self.will + value, int(self.characteristics['–æ–±—â–µ–Ω–∏–µ']) * 3)
                self.will = valid_value

        self.save()
        return valid_value

    def save(self):
        file_path = "./characters/" + self.file_name + ".json"
        with open(file_path, 'r', encoding=ENCODING) as file:
            js = json.load(file)

            for character in js:
                if character['name'] == self.name:
                    character['resources'] = {'–∑–¥–æ—Ä–æ–≤—å–µ': self.health,
                                              '–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å': self.endurance,
                                              '—Ä–∞—Å—Å—É–¥–æ–∫': self.mind,
                                              '–≤–æ–ª—è': self.will}
                    self.js = character
                    break
            else:
                js.append(self.js)

        with open(file_path, 'w', encoding=ENCODING) as file:
            json.dump(js, file, ensure_ascii=False)

        return self

    def to_sting(self):
        text = f"""
        <b>{self.name}</b>
    
        <i>–ó–¥–æ—Ä–æ–≤—å–µ({self.health}/{int(self.characteristics['—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ']) * 3}): </i> [{("üî¥" * self.health) if self.health != 0 else "‚ùå"}]
        <i>–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å({self.endurance}/{int(self.characteristics['–¥–≤–∏–∂–µ–Ω–∏–µ']) * 3}): </i> [{("üü¢" * self.endurance) if self.endurance != 0 else "‚ùå"}]
        <i>–†–∞—Å—Å—É–¥–æ–∫({self.mind}/{int(self.characteristics['–º—ã—à–ª–µ–Ω–∏–µ']) * 3}): </i> [{("üîµ" * self.mind) if self.mind != 0 else "‚ùå"}]
        <i>–í–æ–ª—è({self.will}/{int(self.characteristics['–æ–±—â–µ–Ω–∏–µ']) * 3}): </i> [{("üü†" * self.will) if self.will != 0 else "‚ùå"}]
        
        <pre>
        |   –ù–∞–≤—ã–∫      | –ó–Ω–∞—á. |
        |--------------|:-----:|
        | <a href=>–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ</a> |   {self.characteristics['—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ']}   |
        | –î–≤–∏–∂–µ–Ω–∏–µ     |   {self.characteristics['–¥–≤–∏–∂–µ–Ω–∏–µ']}   |
        | –ú—ã—à–ª–µ–Ω–∏–µ     |   {self.characteristics['–º—ã—à–ª–µ–Ω–∏–µ']}   |
        | –û–±—â–µ–Ω–∏–µ      |   {self.characteristics['–æ–±—â–µ–Ω–∏–µ']}   |
        </pre>
        """
        return text
